<Window x:Class="DMTool.OverlayWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DMTool"
        mc:Ignorable="d"
        Title="DM Tool - Overlay" 
        WindowStyle="None" 
        AllowsTransparency="True"
        Background="Transparent"
        Topmost="True"
        ResizeMode="NoResize"
        ShowInTaskbar="False"
        MouseMove="Window_MouseMove"
        MouseLeftButtonDown="Window_MouseLeftButtonDown"
        MouseLeftButtonUp="Window_MouseLeftButtonUp">

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <local:DivideByTwoConverter x:Key="DivideByTwoConverter"/>
        <local:SubtractValueConverter x:Key="SubtractValueConverter"/>
        <local:CenterRectangleConverter x:Key="CenterRectangleConverter"/>
    </Window.Resources>

    <Grid>
        <!-- Schwarzer, halbtransparenter Fog -->
        <Rectangle x:Name="FogRect" 
                   Fill="#F5000000"
                   Visibility="{Binding Source={x:Static local:App.AppSettings}, Path=EnableFogOfWar, Converter={StaticResource BooleanToVisibilityConverter}}"/>

        <!-- Bilder-Layer (über dem Fog) -->
        <ItemsControl x:Name="ImageItemsControl" Panel.ZIndex="1">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas IsItemsHost="True" ClipToBounds="False"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <Setter Property="Canvas.Left" Value="{Binding PosX}"/>
                    <Setter Property="Canvas.Top" Value="{Binding PosY}"/>
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Grid Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <RotateTransform Angle="{Binding Rotation}"/>
                                <ScaleTransform ScaleX="{Binding Scale}" ScaleY="{Binding Scale}"/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Image Source="{Binding Image}" Stretch="None"/>
                    </Grid>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>

        <!-- Debug-Panel (ganz oben) -->
        <Border Background="#80000000" VerticalAlignment="Top" HorizontalAlignment="Left" 
                Padding="10" MaxWidth="300" MaxHeight="200" Margin="10" Panel.ZIndex="2"
                Visibility="{Binding Source={x:Static local:App.AppSettings}, Path=ShowDebugInfo, Converter={StaticResource BooleanToVisibilityConverter}}">
            <TextBlock x:Name="DebugText" Foreground="White" TextWrapping="Wrap" />
        </Border>

        <!-- Kalibrierungsrahmen (nur sichtbar wenn Debug aktiviert) -->
        <Canvas x:Name="CalibrationFrame" Panel.ZIndex="3" 
                Visibility="{Binding Source={x:Static local:App.AppSettings}, Path=ShowDebugInfo, Converter={StaticResource BooleanToVisibilityConverter}}">

            <!-- Horizontaler Rahmen oben mit Pixelmarkierungen -->
            <Border Height="30" Canvas.Top="0" Canvas.Left="0" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                    Background="#80000000" BorderBrush="Yellow" BorderThickness="0,0,0,1">
                <Canvas>
                    <!-- Pixelmarkierungen werden programmatisch hinzugefügt -->
                </Canvas>
            </Border>

            <!-- Horizontaler Rahmen unten mit Pixelmarkierungen -->
            <Border Height="30" Canvas.Bottom="0" Canvas.Left="0" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                    Background="#80000000" BorderBrush="Yellow" BorderThickness="0,1,0,0"
                    Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource SubtractValueConverter}, ConverterParameter=30}">
                <Canvas>
                    <!-- Pixelmarkierungen werden programmatisch hinzugefügt -->
                </Canvas>
            </Border>

            <!-- Vertikaler Rahmen links mit Pixelmarkierungen -->
            <Border Width="30" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                    Canvas.Left="0" Canvas.Top="0" Background="#80000000" BorderBrush="Yellow" BorderThickness="0,0,1,0">
                <Canvas>
                    <!-- Pixelmarkierungen werden programmatisch hinzugefügt -->
                </Canvas>
            </Border>

            <!-- Vertikaler Rahmen rechts mit Pixelmarkierungen -->
            <Border Width="30" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                    Canvas.Top="0" Background="#80000000" BorderBrush="Yellow" BorderThickness="1,0,0,0"
                    Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource SubtractValueConverter}, ConverterParameter=30}">
                <Canvas>
                    <!-- Pixelmarkierungen werden programmatisch hinzugefügt -->
                </Canvas>
            </Border>

            <!-- Zentrales Kreuz -->
            <Line X1="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource DivideByTwoConverter}}"
                  Y1="0"
                  X2="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource DivideByTwoConverter}}"
                  Y2="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                  Stroke="Yellow" StrokeThickness="1" StrokeDashArray="5,5" />

            <Line X1="0" 
                  Y1="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource DivideByTwoConverter}}"
                  X2="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                  Y2="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource DivideByTwoConverter}}"
                  Stroke="Yellow" StrokeThickness="1" StrokeDashArray="5,5" />

            <!-- Quadrat in der Mitte -->
            <Rectangle Width="100" Height="100"
                       Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource CenterRectangleConverter}, ConverterParameter=100}"
                       Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource CenterRectangleConverter}, ConverterParameter=100}"
                       Stroke="Lime" StrokeThickness="2" StrokeDashArray="2,2" Fill="#200000FF"/>
        </Canvas>
    </Grid>
</Window>